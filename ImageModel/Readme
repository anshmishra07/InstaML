# ðŸš€ InstaML â€” No-Code Machine Learning Platform for Android Platform

## ðŸ“Œ Introduction
InstaML is a **no-code machine learning platform** that allows users to train, test, evaluate, and deploy AI models directly from a simple **Streamlit interface**.  
It is designed for students, researchers, and businesses who want to leverage **ML without writing complex code**.

---

## ðŸ“œ Abstract
The goal of InstaML is to **democratize AI development** by enabling users to:
- Upload datasets
- Perform advanced **Exploratory Data Analysis (EDA)** with 75+ visualization options
- Train ML models for **classification, regression, and object detection**
- Test trained models with custom inputs
- Deploy models instantly for real-world use
- Manage model versions and metadata
FURTHUR FINALLY DEVELOPING IT INTO ANDRIOD APPLICATION FOR MORE FLEXIBLE ADVANTAGE TO USERS LEVERAGE ML IN DAILY WORKFLOWS

The system integrates a **Streamlit frontend** with a **FastAPI backend** and supports multiple ML libraries like **scikit-learn, XGBoost, YOLOv8**, and more.

---

## ðŸ›  Tech Stack
- **Frontend**: [Streamlit](https://streamlit.io/) (Python-based interactive UI)
- **Backend**: [FastAPI](https://fastapi.tiangolo.com/)
- **Machine Learning**: scikit-learn, XGBoost, YOLOv8, Optuna, MLflow
- **Data Visualization**: Seaborn, Matplotlib, Plotly
- **Data Handling**: Pandas, NumPy
- **Deployment**: Docker, GitHub Codespaces, Streamlit Cloud
- **Version Control**: Git + GitHub

---

## ðŸŽ¯ Final Aim
To create a **complete no-code ML ecosystem** where:
- Users can train any model from **tabular, image, or time-series datasets**
- Fully automated **EDA and preprocessing**
- In-built **hyperparameter tuning**
- **Real-time deployment** with minimal effort
- Open-source and easily extensible

---

##  What Has Been Done Till Now
- **Data Upload module** (supports CSV)
- **EDA module** with **75+ visualizations**
-  **Model training** for tabular datasets (classification/regression)
-  **Model evaluation** with performance metrics
-  **Project structure setup** for Streamlit + FastAPI
- **Utility functions** for charts and UI helpers
-  Docker-ready project setup

---

## Updates
- Added **comprehensive EDA charts** (15+ in each category: Univariate, Bivariate, Multivariate, Dimensionality Reduction, Time Series)
- Fixed **import paths** and added `__init__.py` where necessary
- Added **modular chart functions** in `charts.py`
- Prepared **GitHub-ready folder structure**
- Created **README** for clear project onboarding

---

## Running the Project (Local)
```bash
# Navigate to the repo
cd InstaML/InstaML

# Install dependencies
pip install -r requirements.txt

# Run the Streamlit app on a specific port
streamlit run app/app.py --server.port 8501 --server.address 0.0.0.0



## Running on GitHub Codespaces (4 Core)
bash="gh codespace create --repo SAUNAK359/InstaML --machine standardLinux4Core --branch main"


## Pushing Code to GitHub
# Navigate to repo root
cd /workspaces/InstaML

# Stage all changes
git add .

# Commit changes with message
git commit -m "Updated EDA charts and fixed paths"

# Push to main branch
git push origin main

### Overwriting Old Code with Updated Scripts
# Force push updated code
git add .
git commit -m "Overwriting previous code with latest updates"
git push origin main --force
      
************   When committing, always write:
Summary of what changed
Files affected
Impact of changes
